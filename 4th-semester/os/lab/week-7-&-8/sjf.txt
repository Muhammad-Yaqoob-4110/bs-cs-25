#include<stdio.h>

void sjf(int n, int bt[], int wt[], int tat[]) {
    int i, j, temp, completion_time[n], smallest;

    // initialize the waiting time and completion time of all processes to 0
    for(i = 0; i < n; i++) {
        wt[i] = 0;
        completion_time[i] = 0;
    }

    // find the completion time for each process
    for(i = 0; i < n; i++) {
        smallest = i;
        for(j = i+1; j < n; j++) {
            if(bt[j] < bt[smallest]) {
                smallest = j;
            }
        }
        temp = bt[i];
        bt[i] = bt[smallest];
        bt[smallest] = temp;

        temp = completion_time[i];
        completion_time[i] = completion_time[smallest];
        completion_time[smallest] = temp;
        
        completion_time[i] = (i == 0) ? bt[i] : (completion_time[i-1] + bt[i]);
    }

    // find the waiting time and turnaround time for each process
    for(i = 0; i < n; i++) {
        tat[i] = completion_time[i];
        wt[i] = tat[i] - bt[i];
    }
}

int main() {
    int n, i;
    float avg_wt = 0, avg_tat = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int bt[n], wt[n], tat[n];

    printf("Enter the burst time for each process:\n");
    for(i = 0; i < n; i++) {
        printf("Burst time for process %d: ", i+1);
        scanf("%d", &bt[i]);
    }

    sjf(n, bt, wt, tat);

    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\tCompletion Time\n");
    for(i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", i+1, bt[i], wt[i], tat[i], tat[i]+wt[i]);
        avg_wt += wt[i];
        avg_tat += tat[i];
    }

    avg_wt /= n;
    avg_tat /= n;

    printf("Average waiting time: %.2f\n", avg_wt);
    printf("Average turnaround time: %.2f\n", avg_tat);

    return 0;
}
